apiVersion: apps/v1
kind: Deployment
metadata:
  name: mssql-java-client
  labels:
    app: mssql-java-client
spec:
  replicas: 1  # You can increase this if you want more replicas
  selector:
    matchLabels:
      app: mssql-java-client
  template:
    metadata:
      labels:
        app: mssql-java-client
    spec:
      containers:
      - name: mssql-java-client
        image: cvifli/mssql-java-client  # Use the image name you built for the Java app
        imagePullPolicy: Always
        env:
        - name: SERVER  # Environment variable for MS SQL Server
          value: "mssql-server.mssqltest.svc.cluster.local"  # Fully qualified domain name (FQDN) of the headless service
        - name: DATABASE  # Database name
          value: "AdventureWorks"
        - name: USERNAME  # Username for the SQL Server
          value: "SA"
        - name: PASSWORD  # Password for the SQL Server
          value: "password123"  # In production, store this securely using Kubernetes Secrets
        - name: DD_ENV
          value: lab
        - name: DD_SERVICE
          value: "java-demo"
        - name: DD_TRACE_SAMPLE_RATE
          value: "1.0"
        - name: DD_VERSION
          value: "1.0"
        - name: JDK_JAVA_OPTIONS
          value: "-javaagent:/app/dd-java-agent.jar -javaagent:/app/splunk-otel-javaagent.jar"
        - name: DD_AGENT_HOST
          value: datadog.datadog
        - name: DD_TRACE_AGENT_PORT
          value: "8126"
        - name: DD_TRACE_DEBUG
          value: "true"
        - name: DD_DBM_PROPAGATION_MODE
          value: "full"
        - name: DD_INTEGRATION_JDBC_DATASOURCE_ENABLED
          value: "true"
        - name: OTEL_SERVICE_NAME
          value: "java-demo"
        - name: OTEL_EXPORTER_OTLP_ENDPOINT
          value: http://splunk-otel-collector-agent.splunk:4318
        - name: OTEL_RESOURCE_ATTRIBUTES
          value: deployment.environment=lab,service.version=1.0
        ports:
        - containerPort: 8080  # Optional: You can expose a port if needed for HTTP health checks, metrics, etc.
        resources:
          limits:
            memory: "1024Mi"
            cpu: "1000m"
          requests:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          tcpSocket:
            port: 8080  # Optional: Set this to a port where your Java app may expose health checks
          initialDelaySeconds: 60
          periodSeconds: 30
        readinessProbe:
          tcpSocket:
            port: 8080  # Optional: Same port for readiness
          initialDelaySeconds: 60
          periodSeconds: 30
      restartPolicy: Always
---
apiVersion: v1
kind: Service
metadata:
  name: mssql-server
spec:
  selector:
    app: mssql-server
  ports:
  - protocol: TCP
    port: 1433
    targetPort: 1433
  type: ClusterIP
